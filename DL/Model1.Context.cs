//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProyectoGitEntities : DbContext
    {
        public ProyectoGitEntities()
            : base("name=ProyectoGitEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Ciudad> Ciudads { get; set; }
        public virtual DbSet<EquiposDeportivo> EquiposDeportivos { get; set; }
    
        public virtual int EquipoAdd(string nombreEquipo, string entrenador, string fundacion, Nullable<int> campeonatosGanados, Nullable<int> idCiudad)
        {
            var nombreEquipoParameter = nombreEquipo != null ?
                new ObjectParameter("NombreEquipo", nombreEquipo) :
                new ObjectParameter("NombreEquipo", typeof(string));
    
            var entrenadorParameter = entrenador != null ?
                new ObjectParameter("Entrenador", entrenador) :
                new ObjectParameter("Entrenador", typeof(string));
    
            var fundacionParameter = fundacion != null ?
                new ObjectParameter("Fundacion", fundacion) :
                new ObjectParameter("Fundacion", typeof(string));
    
            var campeonatosGanadosParameter = campeonatosGanados.HasValue ?
                new ObjectParameter("CampeonatosGanados", campeonatosGanados) :
                new ObjectParameter("CampeonatosGanados", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("IdCiudad", idCiudad) :
                new ObjectParameter("IdCiudad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipoAdd", nombreEquipoParameter, entrenadorParameter, fundacionParameter, campeonatosGanadosParameter, idCiudadParameter);
        }
    
        public virtual int EquipoDelete(Nullable<int> idEquipo)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipoDelete", idEquipoParameter);
        }
    
        public virtual int EquipoUpdate(Nullable<int> idEquipo, string nombreEquipo, string entrenador, string fundacion, Nullable<int> campeonatosGanados, Nullable<int> idCiudad)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            var nombreEquipoParameter = nombreEquipo != null ?
                new ObjectParameter("NombreEquipo", nombreEquipo) :
                new ObjectParameter("NombreEquipo", typeof(string));
    
            var entrenadorParameter = entrenador != null ?
                new ObjectParameter("Entrenador", entrenador) :
                new ObjectParameter("Entrenador", typeof(string));
    
            var fundacionParameter = fundacion != null ?
                new ObjectParameter("Fundacion", fundacion) :
                new ObjectParameter("Fundacion", typeof(string));
    
            var campeonatosGanadosParameter = campeonatosGanados.HasValue ?
                new ObjectParameter("CampeonatosGanados", campeonatosGanados) :
                new ObjectParameter("CampeonatosGanados", typeof(int));
    
            var idCiudadParameter = idCiudad.HasValue ?
                new ObjectParameter("IdCiudad", idCiudad) :
                new ObjectParameter("IdCiudad", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EquipoUpdate", idEquipoParameter, nombreEquipoParameter, entrenadorParameter, fundacionParameter, campeonatosGanadosParameter, idCiudadParameter);
        }
    
        public virtual ObjectResult<GetAllDDLCiudad_Result> GetAllDDLCiudad()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllDDLCiudad_Result>("GetAllDDLCiudad");
        }
    
        public virtual ObjectResult<GetByIdEquipo_Result> GetByIdEquipo(Nullable<int> idEquipo)
        {
            var idEquipoParameter = idEquipo.HasValue ?
                new ObjectParameter("IdEquipo", idEquipo) :
                new ObjectParameter("IdEquipo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetByIdEquipo_Result>("GetByIdEquipo", idEquipoParameter);
        }
    
        public virtual ObjectResult<GetAll_Result> GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Result>("GetAll");
        }
    }
}
